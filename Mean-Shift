{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Tugas Akhir - Kelompok 6.ipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"2S2QFbCQISfT","colab_type":"code","outputId":"4712912a-9d29-43f6-aa68-1738933ea919","executionInfo":{"status":"ok","timestamp":1565908526800,"user_tz":-420,"elapsed":43105,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":411}},"source":["!pip install pyDrive\n","\n","import os\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from google.colab import files\n","from oauth2client.client import GoogleCredentials\n","\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting pyDrive\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/52/e0/0e64788e5dd58ce2d6934549676243dc69d982f198524be9b99e9c2a4fd5/PyDrive-1.3.1.tar.gz (987kB)\n","\u001b[K     |████████████████████████████████| 993kB 2.8MB/s \n","\u001b[?25hRequirement already satisfied: google-api-python-client>=1.2 in /usr/local/lib/python3.6/dist-packages (from pyDrive) (1.7.10)\n","Requirement already satisfied: oauth2client>=4.0.0 in /usr/local/lib/python3.6/dist-packages (from pyDrive) (4.1.3)\n","Requirement already satisfied: PyYAML>=3.0 in /usr/local/lib/python3.6/dist-packages (from pyDrive) (3.13)\n","Requirement already satisfied: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pyDrive) (0.11.3)\n","Requirement already satisfied: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pyDrive) (3.0.0)\n","Requirement already satisfied: six<2dev,>=1.6.1 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pyDrive) (1.12.0)\n","Requirement already satisfied: google-auth>=1.4.1 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pyDrive) (1.4.2)\n","Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pyDrive) (0.0.3)\n","Requirement already satisfied: pyasn1-modules>=0.0.5 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pyDrive) (0.2.6)\n","Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pyDrive) (4.0)\n","Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pyDrive) (0.4.6)\n","Requirement already satisfied: cachetools>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth>=1.4.1->google-api-python-client>=1.2->pyDrive) (3.1.1)\n","Building wheels for collected packages: pyDrive\n","  Building wheel for pyDrive (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pyDrive: filename=PyDrive-1.3.1-cp36-none-any.whl size=27435 sha256=f5d49a2e77da138d8fea3395d6ed152d69432f38e981088acc3bc7b2a3d34cec\n","  Stored in directory: /root/.cache/pip/wheels/fa/d2/9a/d3b6b506c2da98289e5d417215ce34b696db856643bad779f4\n","Successfully built pyDrive\n","Installing collected packages: pyDrive\n","Successfully installed pyDrive-1.3.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lmRltn_tWJMU","colab_type":"code","outputId":"a6c31fff-4a78-499e-c204-6a02a6cd25b0","executionInfo":{"status":"ok","timestamp":1565908527871,"user_tz":-420,"elapsed":44144,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["import pandas as pd\n","download = drive.CreateFile({'id':'1BtJzvgMBovXTK0l5GS4F1wrMMJqGFeNW'})\n","text = download.GetContentFile(\"anak_kos.csv\")\n","df = pd.read_csv(\"anak_kos.csv\")\n","df.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Makan</th>\n","      <th>Pakaian</th>\n","      <th>Kos</th>\n","      <th>Total</th>\n","      <th>Grup</th>\n","      <th>Saku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200000</td>\n","      <td>150000</td>\n","      <td>300000</td>\n","      <td>650000</td>\n","      <td>1</td>\n","      <td>7500000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2500000</td>\n","      <td>500000</td>\n","      <td>1000000</td>\n","      <td>4000000</td>\n","      <td>1</td>\n","      <td>6000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>800000</td>\n","      <td>300000</td>\n","      <td>600000</td>\n","      <td>1700000</td>\n","      <td>1</td>\n","      <td>6000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1500000</td>\n","      <td>500000</td>\n","      <td>500000</td>\n","      <td>2500000</td>\n","      <td>1</td>\n","      <td>3000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1000000</td>\n","      <td>100000</td>\n","      <td>350000</td>\n","      <td>1450000</td>\n","      <td>1</td>\n","      <td>3000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Makan  Pakaian      Kos    Total  Grup     Saku\n","0   200000   150000   300000   650000     1  7500000\n","1  2500000   500000  1000000  4000000     1  6000000\n","2   800000   300000   600000  1700000     1  6000000\n","3  1500000   500000   500000  2500000     1  3000000\n","4  1000000   100000   350000  1450000     1  3000000"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"46qGQT2cWt7h","colab_type":"code","outputId":"7b8e8ed9-e1b9-4ad4-cca1-d5f719590dd3","executionInfo":{"status":"ok","timestamp":1565908527875,"user_tz":-420,"elapsed":44126,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["df.describe()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Makan</th>\n","      <th>Pakaian</th>\n","      <th>Kos</th>\n","      <th>Total</th>\n","      <th>Grup</th>\n","      <th>Saku</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5.600000e+01</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>5.600000e+01</td>\n","      <td>56.000000</td>\n","      <td>5.600000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>7.955357e+05</td>\n","      <td>161017.857143</td>\n","      <td>483928.571429</td>\n","      <td>1.440482e+06</td>\n","      <td>0.678571</td>\n","      <td>1.725000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.727389e+05</td>\n","      <td>157892.424952</td>\n","      <td>213702.670009</td>\n","      <td>6.030623e+05</td>\n","      <td>0.471251</td>\n","      <td>1.337909e+06</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.500000e+05</td>\n","      <td>0.000000</td>\n","      <td>2.500000e+05</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>6.000000e+05</td>\n","      <td>17500.000000</td>\n","      <td>340000.000000</td>\n","      <td>1.050000e+06</td>\n","      <td>0.000000</td>\n","      <td>1.000000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>8.000000e+05</td>\n","      <td>100000.000000</td>\n","      <td>487500.000000</td>\n","      <td>1.425000e+06</td>\n","      <td>1.000000</td>\n","      <td>1.500000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>9.250000e+05</td>\n","      <td>262500.000000</td>\n","      <td>600000.000000</td>\n","      <td>1.700000e+06</td>\n","      <td>1.000000</td>\n","      <td>2.000000e+06</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.500000e+06</td>\n","      <td>500000.000000</td>\n","      <td>1000000.000000</td>\n","      <td>4.000000e+06</td>\n","      <td>1.000000</td>\n","      <td>7.500000e+06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Makan        Pakaian  ...       Grup          Saku\n","count  5.600000e+01      56.000000  ...  56.000000  5.600000e+01\n","mean   7.955357e+05  161017.857143  ...   0.678571  1.725000e+06\n","std    3.727389e+05  157892.424952  ...   0.471251  1.337909e+06\n","min    0.000000e+00       0.000000  ...   0.000000  2.500000e+05\n","25%    6.000000e+05   17500.000000  ...   0.000000  1.000000e+06\n","50%    8.000000e+05  100000.000000  ...   1.000000  1.500000e+06\n","75%    9.250000e+05  262500.000000  ...   1.000000  2.000000e+06\n","max    2.500000e+06  500000.000000  ...   1.000000  7.500000e+06\n","\n","[8 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"YLI5Wzs4W0O1","colab_type":"code","outputId":"1c6e13df-136e-4d2e-9933-851b22790618","executionInfo":{"status":"ok","timestamp":1565908527877,"user_tz":-420,"elapsed":44110,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":612}},"source":["df['Total'].value_counts()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1700000    5\n","1500000    3\n","900000     3\n","1300000    3\n","1550000    3\n","1200000    3\n","1400000    3\n","1050000    3\n","1800000    2\n","2000000    2\n","1600000    2\n","1450000    2\n","1000000    1\n","2100000    1\n","770000     1\n","350000     1\n","650000     1\n","2500000    1\n","1130000    1\n","1510000    1\n","850000     1\n","940000     1\n","2700000    1\n","1900000    1\n","1010000    1\n","1225000    1\n","820000     1\n","1340000    1\n","465000     1\n","2750000    1\n","1507000    1\n","600000     1\n","1650000    1\n","4000000    1\n","Name: Total, dtype: int64"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"pOe9Y1lajEfj","colab_type":"code","outputId":"bad53233-5d4e-46fa-8803-56a36b5c6d55","executionInfo":{"status":"ok","timestamp":1565908527879,"user_tz":-420,"elapsed":44094,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["df['Grup'].value_counts()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    38\n","0    18\n","Name: Grup, dtype: int64"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"MspHL0myHGps","colab_type":"code","outputId":"e216f08b-35dc-4f34-a860-0aac86b9cb09","executionInfo":{"status":"ok","timestamp":1565908551983,"user_tz":-420,"elapsed":1218,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}},"colab":{"base_uri":"https://localhost:8080/","height":434}},"source":["import csv\n","\n","import numpy as np\n","from sklearn import cluster, covariance, manifold\n","from sklearn.cluster import MeanShift, estimate_bandwidth\n","import matplotlib.pyplot as plt\n","\n","# Load data from input file\n","download = drive.CreateFile({'id':'1BtJzvgMBovXTK0l5GS4F1wrMMJqGFeNW'})\n","text = download.GetContentFile(\"anak_kos.csv\")\n","input_file = 'anak_kos.csv'\n","file_reader = csv.reader(open(input_file, 'r'), delimiter=',')\n","X = []\n","for count, row in enumerate(file_reader):\n","    if not count:\n","        names = row[2:]\n","        continue\n","\n","    X.append([float(x) for x in row[2:]])\n","\n","# Input data as numpy array\n","X = np.array(X)\n","\n","# Estimating the bandwidth \n","bandwidth = estimate_bandwidth(X, quantile=0.8, n_samples=len(X))\n","\n","# Compute clustering with MeanShift\n","meanshift_estimator = MeanShift(bandwidth=bandwidth, bin_seeding=True)\n","meanshift_estimator.fit(X)\n","labels = meanshift_estimator.labels_\n","centroids = meanshift_estimator.cluster_centers_\n","num_clusters = len(np.unique(labels))\n","\n","print (\"\\nNumber of clusters in input data =\", num_clusters)\n","\n","print (\"\\nCentroids of clusters:\")\n","print ('\\t'.join([name[:8] for name in names]))\n","for centroid in centroids:\n","    print ('\\t'.join([str(int(x)) for x in centroid]))\n","\n","################\n","# Visualizing data\n","\n","centroids_total_grup = centroids[:, 1:3]\n","\n","# Plot the nodes using the coordinates of our centroids_total_grup\n","plt.figure()\n","plt.scatter(centroids_total_grup[:,0], centroids_total_grup[:,1], \n","        s=100, edgecolors='k', facecolors='none')\n","\n","offset = 0.2\n","plt.xlim(centroids_total_grup[:,0].min() - offset * centroids_total_grup[:,0].ptp(),\n","        centroids_total_grup[:,0].max() + offset * centroids_total_grup[:,0].ptp(),)\n","plt.ylim(centroids_total_grup[:,1].min() - offset * centroids_total_grup[:,1].ptp(),\n","        centroids_total_grup[:,1].max() + offset * centroids_total_grup[:,1].ptp())\n","\n","plt.title('Centroids of clusters for Student Living Cost')\n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["\n","Number of clusters in input data = 4\n","\n","Centroids of clusters:\n","Kos\tTotal\tGrup\tSaku\n","475000\t1381096\t0\t1425000\n","1000000\t4000000\t1\t6000000\n","600000\t1700000\t1\t6000000\n","300000\t650000\t1\t7500000\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n7mbW1Ywm+490LadRTih1atFa59MyZmY55CN3M7McqtmvDN15551j0KBBterezGyL9NRTTy2JiPq2\n2tUs3AcNGkRjY2Otujcz2yJJeqXtVj4tY2aWSw53M7MccribmeWQw93MLIcc7mZmOeRwNzPLIYe7\nmVkOOdzNzHLI4W5mlkMOdzOzHHK4m5nlkMPdzCyHHO5mZjnkcDczyyGHu5lZDjnczcxyyOFuZpZD\nDnczsxxyuJuZ5ZDD3cwshxzuZmY55HA3M8shh7uZWQ453NspIlixYgVvv/12rUvp8iKCt956y2Nl\nXUJEsGrVKlasWEFE1Lqczc7hXqHly5dzzTXXMHjwYPr370/fvn3Zf//9+cEPfsC7775b6/K6lKVL\nl/L1r3+d3Xffnd12240+ffowatQobr31VtatW1fr8qybWbNmDVOmTGHfffelvr6efv36MWzYMK69\n9lpWrlxZ6/I2G4d7BV577TUOOuggZs+ezU9+8hNWrlzJqlWr+OY3v8m0adM44YQTWLNmTa3L7BKa\nmpoYNWoUCxYs4J577mHFihWsWrWKr33ta0yZMoUJEyb4w9A6zdtvv824ceOYOXMmkyZNYtWqVaxc\nuZLbbruNRx55hEMOOYSlS5fWuszNQm19PZH0Q+A44PWI+GCJ+QImAccAbwOnRcTTbXXc0NAQjY2N\nHSq6sx122GGMHTuWq6+++j3z1q5dy4knnsiQIUP47ne/W4Pquo6I4MADD+STn/wkF1100Xvmv/PO\nO4wfP57Ro0dz5ZVXdn6B1u2cffbZrFq1imnTptGjR4+N5kUEF1xwAS+99BI/+9nPalRh+0l6KiIa\n2mwYEa3+AAcD+wF/LjP/GOBXgIADgcfbWmZEsP/++8eW4Omnn46BAwfG2rVry7ZpamqK3r17x1tv\nvdWJlXU9v//972PYsGGxbt26sm2ef/75qK+vj9WrV3diZdYdNTc3x4477hhLliwp22b16tVRX18f\nL7zwQidWtmmAxqggY9s8LRMRDwOtfW85Hrg19fsYsJOk/m1+qmwh7r77bk499VTq6urKthkwYACj\nRo3i17/+dSdW1vXcddddTJw4ka22Kr9ZDR06lL333psHH3yw8wqzbukXv/gFRx55JH379i3bZrvt\ntmPChAncfffdnVhZ56jGOffdgKaC5wvTtPeQdJakRkmNzc3NVeh681u2bBn9+7f9WdW/f3+WLVvW\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"EiqcYsg4bENO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"cacc2fdf-e343-4a3e-875e-ccef177dcfae","executionInfo":{"status":"ok","timestamp":1565910994193,"user_tz":-420,"elapsed":759,"user":{"displayName":"Khoirina Wulan","photoUrl":"https://lh5.googleusercontent.com/-MftPFoghhQU/AAAAAAAAAAI/AAAAAAAAEHQ/fr41xzr21OU/s64/photo.jpg","userId":"17823541747932169690"}}},"source":["from sklearn.metrics import adjusted_rand_score, silhouette_score\n","\n","print(\"ARI : \",adjusted_rand_score(labels,meanshift_estimator.labels_))"],"execution_count":34,"outputs":[{"output_type":"stream","text":["ARI :  1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FCNKmEwLbu7L","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}
